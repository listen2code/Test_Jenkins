apply plugin: 'com.android.application'

android {
    signingConfigs {
        testjenkins {
            keyAlias 'testjenkins'
            keyPassword 'testjenkins'
            storeFile file('../tools/test_jenkins.jks')
            storePassword 'testjenkins'
        }
    }

    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    defaultConfig {
        applicationId "com.listen.test_jenkins"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.testjenkins
            // 配置多渠道批量打包
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def apk = output.outputFile
                    if (apk != null && apk.name.endsWith('.apk')) {
                        def fileName = ""
                        if("releaseFlavors".equals(${variant.productFlavors[0].name})) {
                            // 固定输出一个release包
                            fileName = "lisong_newest_release.apk"
                        } else {
                            fileName = "lisong_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        }
                        // 自定义APK输出路径
                        output.outputFile = new File(gradle.ext.outputPath, fileName)//new File(apk.parent, fileName)
                    }
                }
            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.testjenkins
        }
    }

    // *********多渠道*********
    productFlavors {
        releaseFlavors {}
        WanDouJia {}
        Xiaomi {}

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }
    }
    // *********多渠道*********

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:23.4.0'
    testCompile 'junit:junit:4.12'
}

def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

def loadProperties(){
    //属性值从 local.properites 中读取
    Properties properties = new Properties()
    File propertyFile = new File(rootDir.getAbsolutePath() + "/local.properties")
    properties.load(propertyFile.newDataInputStream())
    //gradle 就是 gradle 对象。它默认是 Settings 和 Project 的成员变量。可直接获取

    //ext 前缀，表明操作的是外置属性。api 是一个新的属性名。前面说过，只在
    //第一次定义或者设置它的时候需要 ext 前缀
    gradle.ext.outputPath = properties.getProperty('output.path')

}

loadProperties()
